Welcome to the "v1" directory! In this directory, we will explore convolutional neural network (CNN) architecture and its implementation.

CNNs are a type of deep neural network that are commonly used in computer vision tasks, such as image classification, object detection, and segmentation. The basic building block of a CNN is the convolutional layer, which applies a set of learnable filters to the input image to extract features at different spatial scales.

To train a CNN, we typically use a variant of stochastic gradient descent (SGD) algorithm called backpropagation. During training, we feed the CNN with a set of input images and their corresponding labels, and adjust the network parameters (i.e., filter weights and biases) to minimize the prediction error.

To evaluate the performance of a CNN, we typically use a separate set of images (i.e., validation set or test set) that are not seen during training. We measure the prediction accuracy on these images to assess how well the CNN generalizes to new data.

In this directory, we will provide examples of how to implement and train a CNN using popular deep learning frameworks such as TensorFlow and Keras. We will also demonstrate how to visualize the learned filters and feature maps to gain insights into how the CNN processes images.

So, if you are interested in learning about CNNs and their application in computer vision, you are in the right place! Let's dive in and explore the exciting world of CNNs.

Directories introduction:

	[1] _augmented_: contains augmented images generated by ImageDataGenerator() class
	[2] _data_: contains test, train, and validation sub directories
		** Number of images per sub-directory
			a) test: 12 images
			b) train: 120 images
			c) validation: 60 images
	[3] _figures_: contains figures of learning curves
	[4] _fmapimages_: contains two images (apple and banana) for feature map visualization
	[5] _font_: contains .ttf file for font setup in visualkeras
	[6] _live_: contains three jupyter notebooks for
		a) fruit classification with preprocessing
		b) fruit classification without preprocessing
		c) fruit classification with pretrained
	[7] _mdimages_: contains images of biological and artificial neuron with images of convolution, pooling, padding, and neural network.
	[8] _model_: contains trained model in .h5 format
	
Execution flow:

	[1] Complete the hands-on classification of fruits without any preprocessing first. so that you can get a sense of how to use Keras and 
	    TensorFlow to implement CNN. Additionally, you'll understand the importance of the neptune.ai result analysis. {run the notebook 
	    "live_fruit_classification_without_preprocessing.ipynb".}
	    
	[2] Then proceed to classify the fruits while using the ImageDataGenerator() class for image preprocessing. Additionally, you will learn 
	    about both pre-defined and custom parameters for data augmentation in that. {run the notebook 
	    "live_fruit_classification_with_preprocessing.ipynb".}
	    
	[3] Then get your hands dirty on the trained model at the end. in order for you to learn about transfer learning and convolution neural 
	    network feature map visualization. {run the notebook "live_fruit_classification_with_pretrained.ipynb".}
	
	
